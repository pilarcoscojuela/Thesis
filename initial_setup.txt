// Initialize constants and fields
n := 8;
q := 2^n;
Fq<T> := FiniteField(q); // T is the generator of Fq
p := PrimitivePolynomial(Fq, 2);
Sq<x> := PolynomialRing(Fq);
Sq!p;

Fq2<u> := ext<Fq | p>; // Fq2 is an extension of Fq
AssertAttribute(Fq2, "PowerPrinting", false);


prefixes := ["R","S", "K", "L","Z","W","X","Y"]; 
prefixes_t := ["Rt","St", "Kt", "Lt","Zt","Wt","Xt","Yt"];
ctes:=35;
ctes_t:=35;
num_par:=#prefixes*ctes;
num_par_t:=#prefixes_t*ctes_t;
num_h:=200;
num_x:=8;
num_t:=8;
num_lin_c:=32;
num_lin_a:=64;
num_lin_b:=64;

num_lin:=num_lin_a+num_lin_b+num_lin_c;

num_vars := num_par+num_par_t+num_h+num_lin+num_x+num_t; 
num_vars_Sr:=num_par_t+num_h+num_lin;

S<[x]> := PolynomialRing(Fq2, num_vars);

// Assign names to variables of the polynomial ring S
names := [];
for x in prefixes do
    names cat:= &cat[[x cat IntegerToString(i)]: i in [1..ctes]];
end for;
for x in prefixes_t do
    names cat:= &cat[[x cat IntegerToString(i)]: i in [1..ctes_t]];
end for;
for i in [1..num_h] do
names cat:=["H" cat IntegerToString(i)];
end for;
for j in [1..num_lin_c] do
names cat:=["c" cat IntegerToString(j)];
end for;
for j in [1..num_lin_a] do
names cat:=["a" cat IntegerToString(j)];
end for;
for j in [1..num_lin_b] do
names cat:=["b" cat IntegerToString(j)];
end for;

for i in [1..num_x] do
names cat:=["x" cat IntegerToString(i)];
end for;
for j in [1..num_t] do
names cat:=["t" cat IntegerToString(j)];
end for;


AssignNames(~S, names);

P<[y]>:= PolynomialRing(BaseRing(S), Rank(S));

Sr<[z]>:=PolynomialRing(BaseRing(S),num_par_t+num_h+num_lin,"lex");
// Define a ring homomorphism phi: R -> P that sends R.i to P.i.
phi := hom<S -> P | [ S.i : i in [1..Rank(S)] ]>;
psi := hom<P -> S | [ P.i : i in [1..Rank(S)] ]>;

restr:=hom<S -> Sr | [Sr!0: i in [1..num_par]] cat [ Sr.i : i in [1..(num_par_t+num_h+num_lin)] ] cat [Sr!0: i in [num_par+num_par_t+num_h+num_lin+1..num_vars]] >;
inv_restr:=hom<Sr -> S |  [ S.i : i in [(num_par+1)..(num_par+num_par_t+num_h+num_lin)] ] >;



E1:=Matrix(8,8,[16384,0, 16,0, 0,0, 0, 0,0,16384,0, 16,0, 0,0, 0,4,0,0 ,0, 32, 0,0,0,0,4, 
0,0,0, 32, 0,0,0,0, 8,0,0, 0, 32768,0,0,0, 0,8,0, 0, 0,32768,0,0,0, 0, 2,0, 8192 ,0,0,0,0, 0, 0,2, 0,8192]);
 E2:=Matrix(8,8,[ 512, 0, 0, 32, 0, 0, 0, 0, 0, 512, 32, 0, 0, 0, 0, 0, 512, 0, 
32, 0, 0, 0, 0, 0, 0, 512, 0, 32, 0, 0, 0, 0, 2048, 0, 0, 0, 0, 4096, 0, 0, 0, 
2048, 0, 0, 4096, 0, 0, 0, 2048, 0, 0, 0, 4096, 0, 0, 0, 0, 2048, 0, 0, 0, 4096,
0, 0 ]);
 E3:=Matrix(8,8,[ 8, 0, 0, 0, 0, 0, 2, 0, 0, 8, 0, 0, 0, 0, 0, 2, 0, 0, 8, 0, 0,
2, 0, 0, 0, 0, 0, 8, 2, 0, 0, 0, 8, 0, 0, 0, 2, 0, 0, 0, 0, 8, 0, 0, 0, 0, 2, 0,
0, 0, 8, 0, 0, 2, 0, 0, 0, 0, 0, 8, 0, 0, 0, 2 ]);
linear_0:=Matrix(Fq,8,8,[ T^135, T^42, 0, 0, 0, 0, 0, 0, T^194, T^91, 0, 0, 0, 0, 0, 
0, 0, 0, T^215, T^252, 0, 0, 0, 0, 0, 0, T^205, T^246, 0, 0, 0, 0, 0, 0, 0, 0, 
T^70, T^61, 0, 0, 0, 0, 0, 0, T^185, T^92, 0, 0, 0, 0, 0, 0, 0, 0, T^97, T^120, 
0, 0, 0, 0, 0, 0, T^232, T^228 ]);
linear_1:=Matrix(Fq,8,8,[ T^107, T^57, 0, 0, 0, 0, 0, 0, T^144, T^242, 0, 0, 0, 0, 0, 
0, 0, 0, T^225, T^198, 0, 0, 0, 0, 0, 0, T^167, T^37, 0, 0, 0, 0, 0, 0, 0, 0, 
T^73, T^12, 0, 0, 0, 0, 0, 0, T^99, T^120, 0, 0, 0, 0, 0, 0, 0, 0, T^131, T^34, 
0, 0, 0, 0, 0, 0, T^184, T^223 ]);
linear_2:=Matrix(Fq,8,8,[ T^199, T^76, T^33, T^243, 0, 0, 0, 0, T^195, T^172, T^178, 
T^193, 0, 0, 0, 0, T^91, T^140, T^71, T^32, 0, 0, 0, 0, T^249, T^14, T^72, 
T^117, 0, 0, 0, 0, 0, 0, 0, 0, T^241, T^2, T^206, T^57, 0, 0, 0, 0, T^20, T^83, 
T^4, T^77, 0, 0, 0, 0, T^20, T^107, T^153, T^241, 0, 0, 0, 0, T^50, T^62, T^49, 
T^68 ]);
linear_3:=Matrix(Fq,8,8,[ T^150, T^206, T^160, T^82, T^96, T^141, T^233, T^119, T^225, 
T^52, T^200, T^157, T^238, T^188, T^45, T^62, T^109, T^56, T^17, T^22, T^34, 
T^159, T^144, T^196, T^6, T^199, T^12, T^187, T^86, T^13, T^87, T^133, T^4, 
T^35, T^59, T^51, T^161, T^246, T^6, T^28, T^128, T^121, T^110, T^232, T^202, 
T^192, T^39, T^36, T^51, T^202, T^27, 1, T^157, T^29, T^95, T^154, T^170, T^243,
T^246, T^59, T^145, T^78, T^170, T^78 ]);

vector_weights_ex:=[1,1,2,3,4,5,6,6];


vec_x_random_ex:=[ 1: i in [1..8]];

matrices_ex:=[E1,E2,E3];
linears_ex:=[linear_0,linear_1,linear_2,linear_3];
