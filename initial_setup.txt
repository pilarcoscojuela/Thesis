// Initialize constants and fields
n := 8;
q := 2^n;
Fq<T> := FiniteField(q); // T is the generator of Fq
p := PrimitivePolynomial(Fq, 2);
Sq<x> := PolynomialRing(Fq);
Sq!p;

Fq2<u> := ext<Fq | p>; // Fq2 is an extension of Fq
AssertAttribute(Fq2, "PowerPrinting", false);


prefixes := ["R","S", "K", "L","Z","W","X","Y"]; 
prefixes_t := ["Rt","St", "Kt", "Lt","Zt","Wt","Xt","Yt"];
ctes:=35;
ctes_t:=4;
num_par:=#prefixes*ctes;
num_par_t:=#prefixes_t*ctes_t;
num_h:=100;
num_x:=8;
num_t:=8;
num_lin:=24;

num_vars := num_par+num_par_t+num_h+num_lin+num_x+num_t; 

num_vars_Sr:=num_par_t+num_h+num_lin;
S<[x]> := PolynomialRing(Fq2, num_vars);

// Assign names to variables of the polynomial ring S
names := [];
for x in prefixes do
    names cat:= &cat[[x cat IntegerToString(i)]: i in [1..ctes]];
end for;
for x in prefixes_t do
    names cat:= &cat[[x cat IntegerToString(i)]: i in [1..ctes_t]];
end for;
for i in [1..num_lin] do
names cat:=["s" cat IntegerToString(i)];
end for;
for i in [1..num_h] do
names cat:=["H" cat IntegerToString(i)];
end for;

for i in [1..num_x] do
names cat:=["x" cat IntegerToString(i)];
end for;
for j in [1..num_t] do
names cat:=["t" cat IntegerToString(j)];
end for;


AssignNames(~S, names);

P<[y]>:= PolynomialRing(BaseRing(S), Rank(S));
Sr<[z]>:=PolynomialRing(BaseRing(S),num_par_t+num_h+num_lin,"grevlex");
// Define a ring homomorphism phi: R -> P that sends R.i to P.i.
phi := hom<S -> P | [ S.i : i in [1..Rank(S)] ]>;
psi := hom<P -> S | [ P.i : i in [1..Rank(S)] ]>;

restr:=hom<S -> Sr | [Sr!0: i in [1..num_par]] cat [ Sr.i : i in [1..(num_par_t+num_h+num_lin)] ] cat [Sr!0: i in [num_par+num_par_t+num_h+num_lin+1..num_vars]] >;
inv_restr:=hom<Sr -> S |  [ S.(num_par+i) : i in [1..(num_par_t+num_h+num_lin)] ]  >;
  

E1:=Matrix(4,4,[ 64, 512, 256,0, 8,128,2,0,4,64,128,0,0,0,0,1]);



//Random linear matrices invertible over Fq and by blocks 2x2 
linear_0:=Matrix(Fq,8,8,[ T^204, T^72, 0, 0, 0, 0, 0, 0, T^5, T^243, 0, 0, 0, 0, 0, 0,
0, 0, T^179, T^86, 0, 0, 0, 0, 0, 0, T^52, T^75, 0, 0, 0, 0, 0, 0, 0, 0, T^100, 
T^82, 0, 0, 0, 0, 0, 0, T^250, T^196, 0, 0, 0, 0, 0, 0, 0, 0, T^241, T^19, 0, 0,
0, 0, 0, 0, T^118, T^253 ]);
linear_1:=Matrix(Fq,8,8,[ T^211, T^19, 0, 0, 0, 0, 0, 0, T^253, T^178, 0, 0, 0, 0, 0, 
0, 0, 0, T^24, T^187, 0, 0, 0, 0, 0, 0, T^211, T^103, 0, 0, 0, 0, 0, 0, 0, 0, 
T^143, T^248, 0, 0, 0, 0, 0, 0, T^74, T^3, 0, 0, 0, 0, 0, 0, 0, 0, T^223, T^228,
0, 0, 0, 0, 0, 0, T^149, T^70 ]);

trans_0:=Vector(Fq,[0:i in [1..8]]);
trans_1:=Vector(Fq,[0:i in [1..8]]);

vector_weights_ex:=[1,2,3,4,5,6,7,8];
vec_x_random_ex:=[ T^74, T^36, T^136, T^9, T^134, T^84, T^42, T^133 ];
matrices_ex:=[E1];
linears_ex:=[linear_0,linear_1];
translation:=[trans_0];//in case there are affine maps 

